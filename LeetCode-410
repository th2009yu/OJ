410. Split Array Largest Sum
[hard]

Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.

 

Example 1:

Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], m = 2
Output: 9
Example 3:

Input: nums = [1,4,4], m = 3
Output: 4
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= m <= min(50, nums.length)

============================================================
// The answer to any test case will always lie between the max value element of the given array (lower boundary of binary search) and sum of all array elements (upper boundary of binary search) inclusive of the boundaries. This is because:

// After splitting, any subarray will have atleast the max element of the array, or more (in case of multiple elements in the subarray).
// The answer can never go beyond the total sum of all the array elements.**
// In the algorithm, we assume that mid is a possible answer, and we check using binary search if it is possible to split the array into m subarrays such that every subarray is less than the mid.

// If yes, then mid is a contender to the final answer. We store it, and further reduce the high boundary below mid to check if it is possible to get a lower answer.
// If no, then the lower boundary is increased above mid to get a higher mid value in the next iteration.
class Solution {
    public int splitArray(int[] nums, int m) {
        int low = 0, high = 0;
        
        for (int n: nums) {
            low = Math.max(low, n);
            high += n;
        }
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (check(nums, m, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    
    // check if it is possbile to split to m subarrays which each subarry's sum less than or equal to mid
    private boolean check(int[] nums, int m, int mid) {
        int sum = 0;
        int numOfSubarrays = 1;
        
        for (int i = 0; i < nums.length; i ++) {
            sum += nums[i];
            if (sum > mid) {
                numOfSubarrays ++;
                sum = nums[i];
            }
        }
        
        return numOfSubarrays <= m;
    }
}
